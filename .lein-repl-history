(example {:a 1 :b 3 :c -4})
(example {:a 1 :b 3 :c -5})
quit
(example {:a 2 :b 3 :c 1})
quit
(name :a)
(symbol `a)
`a
(symbol :a)
(-> :a symbol keyword)
(-> :a symbol name (str "#"))
(-> :a symbol name (str "#") name)
(-> :a symbol name (str "#") symbol)
quit
(example 2 3 4)
quit
(example 2 3 4)
(example# 2 3 4)
(example# 2 3)
quit
(example# 1 2 3)
quit
(example# 1 2 3)
quit
(keys {:a nil :b 9})
quit
run-dis-fn
quit
(macroexpand-1 (defn+ example {:required [a b c] :optional [d]} (println "a" a "b" b "bananas") (+ a b c)))
quit
(macroexpand-1 (defn+ example {:required [a b c] :optional [d]} (println "a" a "b" b "bananas") (+ a b c)))
quit
(macroexpand-1 (defn+ example {:required [a b c] :optional [d]} (println "a" a "b" b "bananas") (+ a b c)))
quit
`(list* run-dis-fn @&name @&name# &arg-map &required-args body)q
quit
(let [&name 8 &name* 9] '(list* @&name @&name*))
(let [&name 8 &name* 9] '(list* `&name `&name*))
(let [&name 8 &name* 9] '(list* ~&name ~&name*))
(let [&name 8 &name* 9] ('list* &name &name*))
(let [&name 8 &name* 9] `('list* &name &name*))
(let [&name 8 &name* 9] `(list* ~&name ~&name*))
quit
(run-dis-fn 'boogerman '+ {:a 2 :b 3 :c 4} ['a 'b 'c] (println "a"))
quit
(run-dis-fn 'boogerman '+ {:a 2 :b 3 :c 4} ['a 'b 'c])
(run-dis-fn boogerman '+ {:a 2 :b 3 :c 4} ['a 'b 'c])
(run-dis-fn boogerman + {:a 2 :b 3 :c 4} ['a 'b 'c])
quit
(run-dis-fn boogerman + {:a 2 :b 3 :c 4} ['a 'b 'c])
quit
(run-dis-fn boogerman + {:a 2 :b 3 :c 4} ['a 'b 'c])
quit
(run-dis-fn boogerman + {:a 2 :b 3 :c 4} ['a 'b 'c])
quit
(run-dis-fn boogerman + {:a 2 :b 3 :c 4} ['a 'b 'c])
(run-dis-fn boogerman + {:a 2 :b 3 :c 4} [a b c])
quit
'(list `println &argmap)
'(list println &argmap)
quit
(example {})
quit
`
a
`(println "a")
(def a 8)
`(println a)
`(println ~a)
a
'a
`(println ~'a)
quit
('println 'a)
`('println 'a)
'(println a)
'(println `a)
(def a)
'(println ~a)
'(println @a)
'(println a)
'(println ~a)
'(println ~@a)
(list 'println a)
a
(def a 9)
(list 'println a)
quit
(defmacro ++ [& args] `(apply '+ ~args)
)
(++ 1 2 3)
(defmacro ++ [& args] `(apply + ~args)
)
(++ 1 2 3)
(defmacro ++ [& args] `(println ~args) `(apply + ~args)
)
(++ 1 2 3)
(defmacro ++ [& args] `(println ~args))
(++ 1 2 3)
(defmacro ++ [& args] `(println args))
(++ 1 2 3)
(defmacro ++ [& args] `(println @args))
(++ 1 2 3)
(defmacro ++ [& args] `(println ~@args))
(++ 1 2 3)
(defmacro ++ [& args] `[~@args])
(++ 1 2 3)
(map inc (++ 1 2 3))
(++ 1)
(defmacro ++ [& args] `(apply + ~@args))
(++ 1 2 3)
(defmacro ++ [& args] `(+ ~@args))
(++ 1)
(++ 1 2 3)
(defmacro ++ [& args] `(+ ~@args ~@args))
(++ 1 2 3)
quit
(defmacro ++ [ttt] `(println ~@ttt))
(++ :a)
(++ 'a)
(defmacro ++ [ttt] `(println ~ttt))
(++ 'a)
quit
(defmacro ++ [ttt] `(println ~ttt))
(++ ttt)
(++ :a)
quit
'~a
quit
(def ttt 'a)
ttt
(list `defmacro ttt '[b] `(println b))
(list `defmacro ttt '[b] `(println 'b))
(list `defmacro ttt '[b] `(println ~b))
(list `defmacro ttt '[b] `(println @b))
(list `defmacro ttt '[b] (list 'println  'b)
)
quit
(quote ~a)
quit
(defn x [a b c] (+ a b c))
(defn y [] (x 2 3))
(y)
'(println 2)
'(println ~a)
(def a 4)
`(println ~a)
('println ~a)
'(println ~a)
'(println a)
(def b 'a)
'(println ~b)
'(println @b)
'(println `b)
(list 'println b)
contains?
(contains? {:a nil :b nil :c 6} :a)
(contains? {:a nil :b nil :c 6} :b)
(contains? {:a nil :b nil :c 6} :d)
quit
royyyyy
(royyyy {:a 1 :b 2 :c 3 :d 4 :e 5})
(royyyyy {:a 1 :b 2 :c 3 :d 4 :e 5})
(macroexpand required-args a b c d)
(required-args a b c d)
(required-args 'a 'b 'c 'd)
(list println)
(list 'println)
(list (for [a [1 2 3]] (list a 2)))
(list (for [a [1 2 3]] (list 'contains? a 2)))
quit
(++ {:a 2})
(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
~(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
~@(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
@(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
'(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
'`(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
`(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
~@(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
~@(list (for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg)))
quit
(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
(first (for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg)))
(apply list (for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg)))
~@(apply list (for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg)))
'(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
'~(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
~@(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
(for [arg ['a 'b 'c]] (list 'contains? {:a 2} arg))
(contains? {:a 2 :b 3 :c 4} :a :b :c)
quit
(++ {:a 2 :b 3 :c 1 :d 9 :e 11})
quit
(++ {:a 2 :b 3 :c 1 :d 9 :e 11})
quit
(++ {:a 2 :b 3 :c 1 :d 9 :e 11})
(++ {:a 2 :b 3 :c 1 :d 9})
quit
(++ {:a 2 :b 3 :c 1 :d 9})
(++ {:a 2 :b 3 :c 1 :d 9 :e 11})
(++ {:a 2 :b 3 :c 1 :e 11})
defn+
(defn+ hello [{:required [a b] :optional [c] :or {c 8}}]
(+ a b c))
quit
(defn+ hello [{:required [a b] :optional [c] :or {c 8}}]
(+ a b c))
quit
(defn+ hello [{:required [a b] :optional [c] :or {c 8}}]
(+ a b c))
quit
(defn+ hello [{:required [a b] :optional [c] :or {c 8}}]
(+ a b c))
(nth [6 7 8] 0)
quit
(defn+ hello [{:required [a b] :optional [c] :or {c 8}}]
(nth [6 7 8] 0)
(defn+ hello [{:required [a b] :optional [c] :or {c 8}}]
(+ a b c))
(subvec [0 1 2 3 4] 8)
quit
(defn+ hello [{:required [a b] :optional [c] :or {c 8}}]
(+ a b c))
quit
(subvec [0 1 2 3] 0 -1)
(subvec [0 1 2 3] 0 0)
quit
(defn+ hello [{:required [a b] :optional [c] :or {c 8}}]
(+ a b c))
quit
(defn+ hello [{:required [a b] :optional [c] :or {c 8}}]
(+ a b c))
hello$_
quit
